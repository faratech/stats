function showSection(t){document.querySelectorAll(".section").forEach(t=>{t.classList.add("hidden")}),document.getElementById(t).classList.remove("hidden")}function getUtilizationClass(t){return t<50?"green":t<75?"yellow":"red"}function updateUtilizationBar(t,e,o,n="%",s=100){const r=o/s*100;t.style.width=Math.min(r,100)+"%";const c=getUtilizationClass(r);t.className="utilization-fill "+c,e.textContent="number"==typeof o?`${o.toFixed(2)} ${n}`:o,e.style.color="yellow"===c?"#000":"#fff"}let cpuChart,networkChart;document.addEventListener("DOMContentLoaded",function(){showSection("dashboard"),startWebSocket(),new Sortable(document.querySelector(".grid-container"),{animation:150,handle:".card",ghostClass:"sortable-ghost"})});let ws,networkUploadHistory=[],networkDownloadHistory=[],networkLabels=[],processSortColumn="cpu",processSortOrder="desc",connectionSortColumn="status",connectionSortOrder="asc",currentProcessList=[],currentConnectionsList=[];function sortProcesses(t){processSortColumn===t?processSortOrder="asc"===processSortOrder?"desc":"asc":(processSortColumn=t,processSortOrder="name"===t?"asc":"desc"),renderProcessList()}function sortConnections(t){connectionSortColumn===t?connectionSortOrder="asc"===connectionSortOrder?"desc":"asc":(connectionSortColumn=t,connectionSortOrder="asc"),renderConnectionsList()}function getSortedProcesses(){return[...currentProcessList].sort((t,e)=>{let o,n;switch(processSortColumn){case"pid":o=t.pid,n=e.pid;break;case"name":o=t.name.toLowerCase(),n=e.name.toLowerCase();break;case"cpu":o=t.cpu_percent,n=e.cpu_percent;break;case"mem":o=t.memory_percent,n=e.memory_percent}return"name"===processSortColumn?"asc"===processSortOrder?o.localeCompare(n):n.localeCompare(o):"asc"===processSortOrder?o-n:n-o})}function getSortedConnections(){return[...currentConnectionsList].sort((t,e)=>{let o,n;switch(connectionSortColumn){case"proto":o=t.type,n=e.type;break;case"local":o=t.laddr||"",n=e.laddr||"";break;case"remote":o=t.raddr||"",n=e.raddr||"";break;case"status":o=t.status,n=e.status}return"asc"===connectionSortOrder?o.localeCompare(n):n.localeCompare(o)})}function renderProcessList(){const t=document.getElementById("process_list"),e=getSortedProcesses(),o=`\n        <div class="process-header">\n            <div class="process-pid" onclick="sortProcesses('pid')">\n                PID${"pid"===processSortColumn?`<span class="sort-indicator">${"asc"===processSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="process-name" onclick="sortProcesses('name')">\n                COMMAND${"name"===processSortColumn?`<span class="sort-indicator">${"asc"===processSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="process-cpu" onclick="sortProcesses('cpu')">\n                CPU%${"cpu"===processSortColumn?`<span class="sort-indicator">${"asc"===processSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="process-mem" onclick="sortProcesses('mem')">\n                MEM%${"mem"===processSortColumn?`<span class="sort-indicator">${"asc"===processSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n        </div>\n    `,n=e.map(t=>{let e="cpu-low";t.cpu_percent>=80?e="cpu-critical":t.cpu_percent>=50?e="cpu-high":t.cpu_percent>=20&&(e="cpu-medium");let o="mem-low";return t.memory_percent>=50?o="mem-high":t.memory_percent>=20&&(o="mem-medium"),`\n            <div class="process-row">\n                <div class="process-pid">${t.pid}</div>\n                <div class="process-name">${t.name}</div>\n                <div class="process-cpu ${e}">${t.cpu_percent.toFixed(1)}</div>\n                <div class="process-mem ${o}">${t.memory_percent.toFixed(1)}</div>\n            </div>\n        `}).join("");t.innerHTML=o+n;const s=e.length;if(s>0){const e=document.createElement("div");e.style.cssText="position: absolute; bottom: 5px; right: 15px; font-size: 11px; color: #8B949E;",e.textContent=`${s} processes`,t.appendChild(e)}}function renderConnectionsList(){const t=document.getElementById("network_connections"),e=getSortedConnections(),o=`\n        <div class="connection-header">\n            <div class="connection-proto" onclick="sortConnections('proto')">\n                PROTO${"proto"===connectionSortColumn?`<span class="sort-indicator">${"asc"===connectionSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="connection-local" onclick="sortConnections('local')">\n                LOCAL ADDRESS${"local"===connectionSortColumn?`<span class="sort-indicator">${"asc"===connectionSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="connection-remote" onclick="sortConnections('remote')">\n                REMOTE ADDRESS${"remote"===connectionSortColumn?`<span class="sort-indicator">${"asc"===connectionSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n            <div class="connection-status" onclick="sortConnections('status')">\n                STATE${"status"===connectionSortColumn?`<span class="sort-indicator">${"asc"===connectionSortOrder?"▲":"▼"}</span>`:""}\n            </div>\n        </div>\n    `,n=e.map(t=>{let e="";const o=t.status.toLowerCase();return"established"===o?e="status-established":"listen"===o?e="status-listen":"time_wait"===o?e="status-time-wait":"close_wait"===o?e="status-close-wait":"syn_sent"===o?e="status-syn-sent":"syn_recv"===o&&(e="status-syn-recv"),`\n            <div class="connection-row">\n                <div class="connection-proto">${t.type.replace("SOCK_","")}</div>\n                <div class="connection-local">${t.laddr||"-"}</div>\n                <div class="connection-remote">${t.raddr||"-"}</div>\n                <div class="connection-status ${e}">${t.status}</div>\n            </div>\n        `}).join("");t.innerHTML=o+n}function updateStats(t){document.getElementById("hostname").textContent=`Hostname: ${t.hostname}`,document.getElementById("uptime_output").textContent=`Uptime: ${t.uptime_output}`,document.getElementById("os_release").textContent=`OS: ${t.os_release}`,document.getElementById("kernel_version").textContent=`Kernel: ${t.kernel_version}`,document.getElementById("logged_in_users").textContent=`Logged-in Users: ${t.logged_in_users}`,document.getElementById("cpu_info").textContent=`Model: ${t.cpu_info}`,document.getElementById("cpu_frequency").textContent=`Frequency: ${t.cpu_frequency}`,document.getElementById("load_avg").textContent=`Load Avg: ${t.load_avg}`,updateUtilizationBar(document.getElementById("cpu_utilization_fill"),document.getElementById("cpu_utilization_text"),t.cpu_utilization),document.getElementById("memory_info").innerHTML=`\n        <span style="color: #58A6FF;">Total:</span> ${t.memory_total_gb.toFixed(2)} GB | \n        <span style="color: #28a745;">Available:</span> ${t.memory_available_gb.toFixed(2)} GB | \n        <span style="color: #dc3545;">Used:</span> ${t.memory_used_gb.toFixed(2)} GB\n    `,updateUtilizationBar(document.getElementById("memory_utilization_fill"),document.getElementById("memory_utilization_text"),t.memory_utilization),updateUtilizationBar(document.getElementById("swap_utilization_fill"),document.getElementById("swap_utilization_text"),t.swap_utilization),updateUtilizationBar(document.getElementById("disk_utilization_fill"),document.getElementById("disk_utilization_text"),t.disk_utilization);const e=(t.network_utilization.upload+t.network_utilization.download)/1e4*100;document.getElementById("network_utilization_fill").style.width=Math.min(e,100)+"%";const o=getUtilizationClass(e);document.getElementById("network_utilization_fill").className="utilization-fill "+o,document.getElementById("network_utilization_text").textContent=t.network_info.replace("Upload: ","").replace(", Download: "," / "),document.getElementById("network_info").textContent=t.network_info,document.getElementById("disk_read_write").textContent=`Disk I/O - Read: ${t.disk_read}, Write: ${t.disk_write}`,t.network_connections_list&&t.network_connections_list.length>0?(currentConnectionsList=t.network_connections_list.filter(t=>"NONE"!==t.status),renderConnectionsList()):document.getElementById("network_connections").innerHTML="<pre>"+t.network_connections+"</pre>",currentProcessList=t.process_list,renderProcessList();for(const[e,o]of Object.entries(t.service_status)){const t="service_"+e,n=document.getElementById(t);n&&(n.innerHTML=o?'<span class="status-green"><i class="fas fa-check-circle"></i></span>':'<span class="status-red"><i class="fas fa-times-circle"></i></span>')}document.getElementById("last_updated").textContent=`Last updated: ${t.current_time}`,updateCharts(t)}function updateCharts(t){if(cpuChart)cpuChart.data.datasets[0].data=t.per_cpu_utilization,cpuChart.data.datasets[0].backgroundColor=t.per_cpu_utilization.map(t=>t<50?"#28a745":t<75?"#ffc107":"#dc3545"),cpuChart.update();else{const e=document.getElementById("cpu_chart").getContext("2d");cpuChart=new Chart(e,{type:"bar",data:{labels:t.per_cpu_utilization.map((t,e)=>"CPU "+e),datasets:[{label:"Per CPU Utilization (%)",data:t.per_cpu_utilization,backgroundColor:t.per_cpu_utilization.map(t=>t<50?"#28a745":t<75?"#ffc107":"#dc3545"),borderColor:"#58A6FF",borderWidth:1}]},options:{scales:{y:{beginAtZero:!0,max:100}},plugins:{legend:{display:!1}}}})}const e=(new Date).toLocaleTimeString();if(networkLabels.push(e),networkUploadHistory.push(t.network_utilization.upload),networkDownloadHistory.push(t.network_utilization.download),networkLabels.length>20&&(networkLabels.shift(),networkUploadHistory.shift(),networkDownloadHistory.shift()),networkChart)networkChart.data.labels=networkLabels,networkChart.data.datasets[0].data=networkUploadHistory,networkChart.data.datasets[1].data=networkDownloadHistory,networkChart.update();else{const t=document.getElementById("network_chart").getContext("2d");networkChart=new Chart(t,{type:"line",data:{labels:networkLabels,datasets:[{label:"Upload (KB/s)",data:networkUploadHistory,backgroundColor:"rgba(40, 167, 69, 0.2)",borderColor:"#28a745",fill:!0},{label:"Download (KB/s)",data:networkDownloadHistory,backgroundColor:"rgba(88, 166, 255, 0.2)",borderColor:"#58A6FF",fill:!0}]},options:{scales:{y:{beginAtZero:!0},x:{display:!0}},plugins:{legend:{display:!0}}}})}}function startWebSocket(){const t=("https:"===window.location.protocol?"wss":"ws")+"://"+window.location.host+"/ws";ws=new WebSocket(t),ws.onopen=function(){console.log("WebSocket connection established")},ws.onmessage=function(t){updateStats(JSON.parse(t.data))},ws.onclose=function(){console.log("WebSocket connection closed"),setTimeout(startWebSocket,5e3)},ws.onerror=function(t){console.error("WebSocket error:",t),ws.close()}}